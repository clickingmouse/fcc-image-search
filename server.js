 /******************************************************
 * PLEASE DO NOT EDIT THIS FILE
 * the verification process may break
 * ***************************************************/

'use strict';

var fs = require('fs');
var express = require('express');
var app = express();
var bodyParser=require('body-parser');
var cors=require('cors');
var mongoose=require('mongoose');
var router=express.Router();
var path=require('path');
var logger=require('morgan'); // for search timestamp
var Search=require('bing.search');
var util =require('util');
var Bing=require('node-bing-api')({ accKey: "cd6c31dd340c496f813de354e3586bbb" })
const GoogleImages=require('google-images');
const googleIms = require('google-ims');

const clientims = new googleIms('011961933088171713308:v5ptkn6qp_g','AIzaSyCYX4ZFrFmS_9nsGBjkyxhOU4xXdICkJ1A');

const client = new GoogleImages('011961933088171713308:v5ptkn6qp_g','AIzaSyCYX4ZFrFmS_9nsGBjkyxhOU4xXdICkJ1A');

var imageSearch = require('node-google-image-search');
 /*
var results = imageSearch('lolcats', callback, 0, 5);
 
function callback(results) {
    console.log(results)
}
 */

// logger setup
app.use(logger('combined'));



//Mongo related
mongoose.connect(process.env.MONGO_URI);
var Schema = mongoose.Schema

// Database Structure
var searchHistorySchema = new Schema({
searchTerm:{type: String, required:true},
  date: { type: Date, default: Date.now }  //not required as object creation already have a timestamp??
})// Database Structure
var SearchHistoryLog =mongoose.model('SearchHistoryLog', searchHistorySchema);
                 
// handle input
// requirements:: begin with api/imagesearch ... (end with)... ?offset

app.get('/api/imagesearch/:searchTerm', function(req,res){
        
        //testing
        console.log(req.params.searchTerm)
        console.log(req.query.offset)
        console.log(Date())
 
 //  into mongodB
  var newSearchHistoryLog = new SearchHistoryLog({
  searchTerm:req.params.searchTerm
  }) 
 /* disable for now to halt saving while development*/
  newSearchHistoryLog.save(function(err,data){
  if (err) return (err)
  
  console.log(data)
    
  })
  
  
 ////////////////////////////////////////////////////////////////////// 
// parse inputs for api image search
  
var targetResultCount=req.query.offset  
console.log(targetResultCount)
  for (var count = 0; count*10 < targetResultCount; count++){
  console.log(count);
    var end = count;
    console.log(targetResultCount %10 )
    var start = count*10;
    console.log("start: "+start);
    console.log(":::" +Math.floor(targetResultCount/10));
    if (count == Math.floor(targetResultCount/10))
    {
      console.log("ending");
      end = targetResultCount %10;
      
    }  else {end =10;}
    
  console.log ( "start::" + start + " || end::"+ end)
  
    // 0,10
  var results = imageSearch('lolcats funny', callback, start, end);
 // need url snippeet & context
function callback(results) {
  //console.log(results);
  results.forEach(function(result){
    console.log("-------------------");
    console.log(result.link);
console.log(result.snippet);
console.log(result.image.thumbnailLink);
console.log(result.image.contextLink); 
  })
}
      }//for

  
        
        } )//app.get




app.get('/api/latest/imagesearch', function(req,res){
//pull out history from database
  SearchHistoryLog.find({}, function (err,docs){
  
  console.log(docs)
  res.send(docs)
  })//find 
//  MyModel.find({ name: 'john', age: { $gte: 18 }}, function (err, docs) {});

  
  

})//app.get2


 app.listen(process.env.PORT, function () {
  console.log('Node.js listening ...');                
 })

/*
if (!process.env.DISABLE_XORIGIN) {
  app.use(function(req, res, next) {
    var allowedOrigins = ['https://narrow-plane.gomix.me', 'https://www.freecodecamp.com'];
    var origin = req.headers.origin || '*';
    if(!process.env.XORIG_RESTRICT || allowedOrigins.indexOf(origin) > -1){
         console.log(origin);
         res.setHeader('Access-Control-Allow-Origin', origin);
         res.header("Access-Control-Allow-Headers", "Origin, X-Requested-With, Content-Type, Accept");
    }
    next();
  });
}

app.use('/public', express.static(process.cwd() + '/public'));

app.route('/_api/package.json')
  .get(function(req, res, next) {
    console.log('requested');
    fs.readFile(__dirname + '/package.json', function(err, data) {
      if(err) return next(err);
      res.type('txt').send(data.toString());
    });
  });
  
app.route('/')
    .get(function(req, res) {
		  res.sendFile(process.cwd() + '/views/index.html');
    })

// Respond not found to all the wrong routes
app.use(function(req, res, next){
  res.status(404);
  res.type('txt').send('Not found');
});

// Error Middleware
app.use(function(err, req, res, next) {
  if(err) {
    res.status(err.status || 500)
      .type('txt')
      .send(err.message || 'SERVER ERROR');
  }  
})

app.listen(process.env.PORT, function () {
  console.log('Node.js listening ...');
});

*/